package App::TriplejPlaysLocal::Twitter;

use autodie;
use 5.010;
use Carp qw(croak);
use Method::Signatures;
use Try::Tiny;
use Twitter::API;
use App::TriplejPlaysLocal::Song;
use Moo;
use namespace::clean;

# ABSTRACT: Twitter Shortcuts

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

    use App::TriplejPlaysLocal::Twitter;

    my $twitter = App::TriplejPlaysLocal::Twitter->new( tweets => $tweets );

=head1 DESCRIPTION

Twitter Shortcuts. Requires a 'App::TriplejPlaysLocal::Tweets' object 
for storage of retrieved tweets.

=cut

our $DEBUG = $ENV{TRIPLEJ_DEBUG} || 0;

my $Ref = sub {
    croak("auth isn't a 'App::TriplejPlaysLocal::Tweets' object!") 
      unless $_[0]->DOES("App::TriplejPlaysLocal::Tweets");
};

has 'tweets'    => ( is => 'rw', required => 1, isa => $Ref );
has '_twitter'  => ( is => 'ro', lazy => 1, builder => 1 );
has '_since_id'  => ( is => 'rw', default => sub { undef } );

method _get_env($env_var) {
  if (! $ENV{$env_var}) {
    $self->error("$env_var not populated");
  }
  return $ENV{$env_var};
}

method _build__twitter {
  return Twitter::API->new_with_traits(
    traits              => [ qw/ApiMethods RetryOnError/ ],
    consumer_key        => $self->_get_env("TRIPLEJ_CONSUMER_KEY"),
    consumer_secret     => $self->_get_env("TRIPLEJ_CONSUMER_SECRET"),
    access_token        => $self->_get_env("TRIPLEJ_ACCESS_TOKEN"),
    access_token_secret => $self->_get_env("TRIPLEJ_ACCESS_TOKEN_SECRET"),
  );
}

=method get_tweets

  $twitter->get_tweets;

Checks 'triplejplays' for the last 50 tweets or up to the last
50 tweets from the 'since_id' if populated and pushes them into 
the 'App::TriplejPlaysLocal::Tweets' object.

=cut

method get_tweets {
  my $statuses;
  try {
    my $timeline = { screen_name => 'triplejplays', count => 50 };
    $timeline->{since_id} = $self->_since_id if $self->_since_id;
    $statuses = $self->_twitter->user_timeline($timeline);
  } catch {
    $self->debug($_) if $DEBUG;
    $self->error("Error getting tweets");
  };

  my $id = undef;
  for my $status ( @$statuses ) {
    if (! $id ) {
      $self->debug("Setting since_id to: $status->{id}");
      $id = $status->{id};
      $self->_since_id($id);
    }
    $self->info("Adding Tweet: ($status->{id}) $status->{text}");
    $self->tweets->push_val(
      App::TriplejPlaysLocal::Song->new(
        id    => $status->{id},
        tweet => $status->{text},
      )
    );
  }
}

=method tweet

  $twitter->tweet("Status here");

Sends a tweet from the configured account.

=cut

method tweet($tweet_text) {
  try {
    $self->_twitter->update($tweet_text);
  } catch {
    $self->debug($_) if $DEBUG;
    $self->error("Error tweeting");
  }
}

with('App::TriplejPlaysLocal::Logger');

1;
